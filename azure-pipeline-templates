parameters:
  - name: projectName
    type: string
  - name: servicePort
    type: string
  - name: buildCommand
    type: string
    default: 'mvn clean package'
  - name: environment
    type: string
    default: 'development'
  - name: additionalSteps
    type: stepList
    default: []
  - name: sonarCloudOrganization
    type: string
    default: 'tuOrganizacion'
  - name: sonarCloudProjectKey
    type: string
    default: '$(Build.Repository.Name)'

stages:
  - stage: Build
    displayName: 'Build and Test ${{ parameters.projectName }}'
    jobs:
      - job: BuildJob
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            persistCredentials: true
            fetchDepth: 0  # SonarCloud necesita la historia completa para un mejor análisis

          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Setup JDK'

          # Preparar análisis de SonarCloud
          - task: SonarCloudPrepare@3
            displayName: 'Preparar análisis SonarCloud'
            inputs:
              SonarCloud: 'SonarCloud'
              organization: '${{ parameters.sonarCloudOrganization }}'
              scannerMode: 'Other'
              projectKey: '${{ parameters.sonarCloudProjectKey }}'
              projectName: '${{ parameters.projectName }}'
              extraProperties: |
                # Propiedades generales
                sonar.sources=src/main
                sonar.tests=src/test
                sonar.java.binaries=target/classes
                
                # Configuración para análisis de cobertura
                sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                
                # Para revisión de hotspots
                sonar.java.spotbugs.reportPaths=target/spotbugsXml.xml
                sonar.java.pmd.reportPaths=target/pmd.xml
                
                # Si necesitas excluir archivos
                sonar.exclusions=**/generated/**,**/target/**
                
                # Para seguimiento de hotspots ya revisados
                sonar.hotspots.activation=true

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests=false -Pcoverage'
            displayName: 'Maven Build'

          # Ejecutar pruebas con Maven y cobertura de código
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              options: '-Pcoverage'
            displayName: 'Run Tests with Coverage'

          - ${{ parameters.additionalSteps }}

          - script: |
              ${{ parameters.buildCommand }}
            displayName: 'Additional Build Commands'

          # Ejecutar análisis de SonarCloud
          - task: SonarCloudAnalyze@3
            displayName: 'Ejecutar análisis SonarCloud'

          # Publicar la calidad del análisis
          - task: SonarCloudPublish@3
            displayName: 'Publicar resultados de SonarCloud'
            inputs:
              pollingTimeoutSec: '300'

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/target'
              Contents: '*.jar'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Copy JAR Files'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
            displayName: 'Publish Artifacts'

  - stage: Deploy
    displayName: 'Deploy ${{ parameters.projectName }}'
    dependsOn: Build
    jobs:
      - deployment: DeployService
        environment: ${{ parameters.environment }}
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@1
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)'

                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: 'AzureSubscription'
                    appType: 'webAppLinux'
                    appName: '${{ parameters.projectName }}'
                    package: '$(System.ArtifactsDirectory)/drop/*.jar'
                    appSettings: '-PORT ${{ parameters.servicePort }} -JAVA_OPTS -Dserver.port=${{ parameters.servicePort }}'
                    runtimeStack: 'JAVA|17'
                    deploymentMethod: 'auto'
